package com.designpattern.strategy;
/*
 * 策略模式
 * 定义：定义一组算法，将每个算法都封装起来，并且使他们之间可以互换。
 * 类型：行为类模式
 */

/*
 * 结构
 * 封装类：也叫上下文，对策略进行二次封装，目的是避免高层模块对策略的直接调用。
 * 抽象策略：通常情况下为一个接口，当哥哥实现类中存在着重复的逻辑时，则使用抽象类来封装这部分公共的代码，此时，策略模式看上去更像是模板方法模式。
 * 具体策略：具体策略角色通常由一组封装了算法的类来担任，这些类之间可以根据需要自由替换。
 */

/*
 * 优点：
 * 策略类之间可以自由切换，由于策略类实现自同一个抽象，所以他们之间可以自由切换。
 * 易于扩展，增加一个新的策略对策略模式来说非常容易，基本上可以再不改变原代码的基础上进行扩展。
 * 避免使用多重条件，如果不使用策略模式，对于所有的算法，必须使用条件语句进行连接，通过条件判断来决定使用哪一种算法。
 *
 * 缺点：
 * 维护各个策略类会给开发带来额外开销。
 * 必须对客户端(调用者)暴露所有的策略类，因为使用哪种策略是由客户端来决定的，因此，客户端应该知道有什么策略，并且了解各种策略之间的区别，否则，后果很严重。
 */

/*
 * 使用场景
 * 做面向对象设计的，对策略模式一定很熟悉，因为它本质上就是面向对象中的继承和多态。
 * --几个类的主要逻辑相同，只在部分逻辑的算法和行为上稍有区别的情况。
 * --有几种相似的行为，或者说算法，客户端需要动态的决定使用哪一种，那么可以使用策略模式，将这些算法封装起来功客户端调用。
 * 策略模式是一种简单常用的模式，我们在开发的时候，会经常有意无意的使用它，一般来说，策略模式不会单独使用，跟模板方法，工厂模式等混合使用的情况比较多。
 */